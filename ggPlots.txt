# some tips 
# https://stackoverflow.com/questions/50960339/create-ggplot2-function-and-specify-arguments-as-variables-in-data-as-per-ggplot

# https://raysun.name/post/data-visualisation-with-r-ggplot2/
# https://benjaminlouis-stat.fr/en/blog/2020-05-21-astuces-ggplot-rmarkdown/


##############################################################################################################
list_of_pkgs <- c("ggplot2", "ggpubr", "ggstatsplot", "ggiraph", "GGally", 
                  "ggdist", "ggpmisc", "esquisse")

# others: see 
## https://github.com/martin-borkovec/ggparty
## get code from lindia for creating diagnostic plots - https://github.com/yeukyul/lindia/tree/master/R

pkgs <- list_of_pkgs[!(list_of_pkgs %in% installed.packages()[,"Package"])]
if(length(pkgs)) install.packages(pkgs, dep = T)

##############################################################################################################
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
  arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
# stdev <- as.matrix(stdev[,-1]) * 1.96 / 10
# error.bar(ze_barplot,bilan, stdev)

########################################################
# plot a simple y~x plot
########################################################
gg_xy <- function(data, x.var, y.var, title = NULL){
  x.var <- rlang::sym(quo_name(enquo(x.var)))
  y.var <- rlang::sym(quo_name(enquo(y.var)))
  plt <- ggplot2::ggplot(data = data,
                ggplot2::aes(
                  x = !! x.var,
                  y = !! y.var)) +
    ggplot2::geom_point() +
    ggplot2::theme_classic() +
    ggplot2::ggtitle(title)
  return(plt)
}

########################################################
# barplot with error bars 
########################################################
gg_bar_m <- function(data, x, y, #group = "name",
                     bar.col = "gray", alpha = .9, width = .8, size = 1.3,
                     error.col = "red", error.alpha = 1, error.width = .1, error.size = .3,
                     title = NULL
                     #xlab = NULL,
                     #ylab = NULL
                     ) {

  data$group   = data[, x]
  data$outcome = data[, y]
  data.new <- data %>%
      dplyr::group_by(group) %>%
      dplyr::mutate(
        mean = mean(outcome, na.rm = T),
        sd = sd(value, na.rm = T),
      ) 

  plt <- ggplot2::ggplot(data.new) +
    ggplot2::geom_bar( ggplot2::aes(x = group, y = mean), 
              stat = "identity", 
              fill = bar.col, width = width, size = size, alpha = alpha) +
    ggplot2::theme_classic() +
    ggplot2::xlab('xlab') +
    ggplot2::geom_errorbar( 
      ggplot2::aes(x = group, ymin = mean-sd, ymax = mean+sd), 
                   width = error.width, colour = error.col, alpha = error.alpha, size = error.size) +
    ggplot2::ggtitle(title) + ggplot2::xlab(xlab) + ggplot2::ylab(ylab)
  plot(plt)
  return(list(data = data.new, plot = plt))
} 

########################################################
# boxplot m
########################################################
gg_boxplot_m <- function(dat, x.var, y.var, 
                        xlab = NULL, 
                        ylab = NULL, 
                        title = NULL,
                        bar.colors = NULL,
                        legend.position  = "bottom") {
  if (is.null(bar.colors)) { 
    bar.colors = c("green", "yellow", "gray", "blue", "red", "cyan") 
    }
  #print(dat$x.var)
#  message(length(unique(dat[[,x.var]])))
  #values.color = length(unique(dat$x.var))
  
  x.var <- rlang::sym(quo_name(enquo(x.var)))
  y.var <- rlang::sym(quo_name(enquo(y.var)))
  
  plt <- ggplot2::ggplot(
    data = dat, ggplot2::aes(dat,
                  x = !! x.var,
                  y = !! y.var)) +
    ggplot2::geom_boxplot(notch = F) +
    ggplot2::theme_classic() +
#  ggplot2::ggplot(., ggplot2::aes(x = x.var, y = y.var)) +
  #ggplot2::geom_boxplot(notch = F, fill = "yellow") +
 # ggplot2::geom_boxplot(notch = F, 
  #                      ggplot2::aes(fill = x.var)) +
#  ggplot2::scale_fill_manual(values = bar.colors[1:values.color]) +
  ggplot2::theme_classic() +
  #ggplot2::xlab("Predictor") + ggplot2::ylab("Outcome") +
  #ggplot2::ylim(0, 10) +
  
  ggplot2::stat_summary(fun = mean, geom = "point",
               shape = 18, size = 2.5, color = "#FC4E07") +
  ggplot2::theme(legend.position = "bottom")
  return(plt)
}
#gg_boxplot_m(dat = data, x.var = variety, y.var = note)



########################################################
# plot a boxpplot with mxm 
########################################################
gg_boxplot2 <- function(dat, x, y, fill = NULL, 
                        xlab = NULL, 
                        ylab = NULL, 
                        title = NULL,
                        legend.position = "bottom",
                        color.solid = F,
                        mean = T) {
  if (color.solid) { 
    dat$colSolid = 1
  }
  x.var <- rlang::sym(rlang::quo_name(rlang::enquo(x)))
  y.var <- rlang::sym(rlang::quo_name(rlang::enquo(y)))
  if (is.null(fill)) { 
    f.var <- rlang::sym(rlang::quo_name(rlang::enquo(x)))
    } else { 
    f.var <- rlang::sym(rlang::quo_name(rlang::enquo(fill))) 
    }
  if (color.solid) { 
    dat$colSolid = 1
    f.var <- dat$colSolid
    }
  
  plt <- ggplot2::ggplot(
    data = dat, ggplot2::aes(
                  x = !! x.var,
                  y = !! y.var,
                  fill = !! f.var
                  )) +
    ggplot2::geom_boxplot() +
    ggplot2::theme_classic() +
#    if (mean) {
#     ggplot2::stat_summary(fun = mean, geom = "point", 
#                       shape = 18, size = 2.5, color = "#FC4E07") +
#    } +
    ggplot2::ggtitle(title) +
    ggplot2::xlab(xlab) + ggplot2::ylab(ylab) +
    ggplot2::theme(legend.position = legend.position)

    return(plt)
}
#gg_boxplot2(dat = data, x = "variety", y = "note", f = "treatment")
#gg_boxplot_mxm <- gg_boxplot2()


# courtesy 
# https://benjaminlouis-stat.fr/en/blog/2020-05-21-astuces-ggplot-rmarkdown/
theme_ben <- function(base_size = 14) {
  library(ggplot2)
  ggplot2::theme_classic(base_size = base_size) %+replace%
    ggplot2::theme(
      # L'ensemble de la figure
      plot.title = element_text(size = rel(1), face = "bold", margin = margin(0,0,5,0), hjust = 0),
      # Zone où se situe le graphique
      panel.grid.minor = ggplot2::element_blank(),
      panel.border = ggplot2::element_blank(),
      # Les axes
      axis.title = ggplot2::element_text(size = rel(0.85), face = "bold"),
      axis.text  = ggplot2::element_text(size = rel(0.70), face = "bold"),
      axis.line  = ggplot2::element_line(color = "black", arrow = arrow(length = unit(0.3, "lines"), type = "closed")),
      # La légende
      legend.title = ggplot2::element_text(size = rel(0.85), face = "bold"),
      legend.text  = ggplot2::element_text(size = rel(0.70), face = "bold"),
      legend.key   = ggplot2::element_rect(fill = "transparent", colour = NA),
      legend.key.size   = unit(1.5, "lines"),
      legend.background = ggplot2::element_rect(fill = "transparent", colour = NA),
      # Les étiquettes dans le cas d'un facetting
      strip.background = ggplot2::element_rect(fill = "#17252D", color = "#17252D"),
      strip.text = ggplot2::element_text(size = rel(0.85), face = "bold", color = "white", margin = margin(5,0,5,0))
    )
}




#--------------
# Create Theme
#--------------

# BASIC THEME
theme_chart <- 
  ggplot2::theme(legend.position = "none") +
  ggplot2::theme(plot.title = ggplot2::element_text(size=26, family="Trebuchet MS", face="bold", hjust=0, color="#666666")) +
  ggplot2::theme(axis.title = ggplot2::element_text(size=18, family="Trebuchet MS", face="bold", color="#666666")) +
  ggplot2::theme(axis.title.y = ggplot2::element_text(angle=0)) 


# SCATTERPLOT THEME
theme_chart_scatter <- theme_chart +
                            ggplot2::theme(axis.title.x = ggplot2::element_text(hjust=0, vjust=-.5))

# HISTOGRAM THEME
theme_chart_hist <- theme_chart +
                          ggplot2::theme(axis.title.x = ggplot2::element_text(hjust=0, vjust=-.5))

# SMALL MULTIPLE THEME
theme_chart_smallmult <- theme_chart +
                            ggplot2::theme(panel.grid.minor = ggplot2::element_blank()) +
                            ggplot2::theme(strip.text.x = ggplot2::element_text(size=16, family="Trebuchet MS", face="bold", color="#666666"))    

